<filter containers.**>
  @type record_transformer
  enable_ruby
  renew_record true
  <record>
    log    ${record["log"].split(/[\n\t]+/).map! {|item| JSON.parse(item)["log"]}.join("")}
    stream ${[record["log"].split(/[\n\t]+/)[0]].map! {|item| JSON.parse(item)["stream"]}.join("")}
    time   ${[record["log"].split(/[\n\t]+/)[0]].map! {|item| JSON.parse(item)["time"]}.join("")}
  </record>
</filter>
#  only match fluentd logs based on fluentd container name and label them @FLUENT
{{ printf "<match **%s**>" (include "sumologic.fullname" .) }}
  @type relabel
  @label @FLUENT
</match>
<label @FLUENT>
  <filter **>
  # only ingest fluentd logs of levels: {error, fatal} and warning messages if buffer is full
    @type grep
    <regexp>
    key log
    pattern /\[error\]|\[fatal\]|drop_oldest_chunk/
    </regexp>
  </filter>
  <filter **>
    @type kubernetes_metadata
    @include logs.kubernetes.metadata.filter.conf
  </filter>
  <filter **>
    @type enhance_k8s_metadata
    @include logs.kubernetes.enhance.k8s.metadata.filter.conf
  </filter>
  <filter **>
    @type kubernetes_sumologic
    @include logs.kubernetes.sumologic.filter.conf
  </filter>
  <match **>
    @type sumologic
    @id sumologic.endpoint.logs.fluent
    @include logs.output.conf
    <buffer>
      {{- if eq .Values.sumologic.fluentd.buffer "file" }}
      @type file
      path /fluentd/buffer/logs.fluentd
      {{- else }}
      @type memory
      {{- end }}
      @include buffer.output.conf
    </buffer>
  </match>
</label>
# match all remaining container logs and label them @NORMAL
<match containers.**>
  @type relabel
  @label @NORMAL
</match>
<label @NORMAL>
  <filter containers.**>
    @type kubernetes_metadata
    @include logs.kubernetes.metadata.filter.conf
  </filter>
  <filter **>
    @type enhance_k8s_metadata
    @include logs.kubernetes.enhance.k8s.metadata.filter.conf
  </filter>
  <filter containers.**>
    @type kubernetes_sumologic
    @include logs.kubernetes.sumologic.filter.conf
  </filter>
  <match **>
    @type sumologic
    @id sumologic.endpoint.logs
    @include logs.output.conf
    <buffer>
      {{- if eq .Values.sumologic.fluentd.buffer "file" }}
      @type file
      path /fluentd/buffer/logs.containers
      {{- else }}
      @type memory
      {{- end }}
      @include buffer.output.conf
    </buffer>
  </match>
</label>